using Microsoft.CodeAnalysis;
using System;
using System.Text;
using static Emotion.SourceGeneration.Helpers;

namespace Emotion.SourceGeneration
{
    /// <summary>
    /// Generates custom handlers for common types that derive from IEnumerable
    /// </summary>
    public static class ReflectorEnumerableGenerator
    {
        public static bool Run(ref SourceProductionContext context, ITypeSymbol typ)
        {
            if (typ.TypeKind == TypeKind.Array && typ is IArrayTypeSymbol arrayType)
            {
                Console.WriteLine($"[ReflectorV2-Enumerable] Generating array handler for {typ.ToDisplayString()}.");
                GenerateHandlerForArrayType(ref context, arrayType);
                return true;
            }

            if (typ is INamedTypeSymbol namedType && namedType.IsGenericType && namedType.Name == "List" &&
                namedType.OriginalDefinition.ToDisplayString() == "System.Collections.Generic.List<T>")
            {
                Console.WriteLine($"[ReflectorV2-Enumerable] Generating list handler for {typ.ToDisplayString()}.");
                GenerateHandlerForListType(ref context, namedType);
                return true;
            }

            return false;
        }

        private static void GenerateHandlerForArrayType(ref SourceProductionContext context, IArrayTypeSymbol typ)
        {
            // Arrays of built in types are also built in.
            ITypeSymbol elementType = typ.ElementType;
            if (elementType is INamedTypeSymbol namedElementType && IsReflectorBuiltInType(namedElementType)) return;

            StringBuilder sb = new StringBuilder(1024);

            string fullTypName = typ.ToDisplayString();

            string elementFullTypName = elementType.ToDisplayString();
            string safeNameFull = "ArrayOf" + GetSafeName(elementFullTypName);

            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("// Generated by Emotion.SourceGeneration");
            sb.AppendLine();
            sb.AppendLine("#nullable enable");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Runtime.CompilerServices;");
            sb.AppendLine("using Emotion.Standard.Reflector;");
            sb.AppendLine("using Emotion.Standard.Reflector.Handlers;");
            sb.AppendLine();
            sb.AppendLine($"namespace ReflectorGen;");
            sb.AppendLine("");
            sb.AppendLine($"public static class ReflectorData{safeNameFull}");

            sb.AppendLine("{");
            sb.AppendLine("");
            sb.AppendLine("    [ModuleInitializer]");
            sb.AppendLine("    public static void LoadReflector()");
            sb.AppendLine("    {");
            sb.AppendLine($"       ReflectorEngine.RegisterTypeHandler(new ArrayTypeHandler<{fullTypName}, {elementFullTypName}>());");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            context.AddSource($"RFLC.{safeNameFull}.g.cs", sb.ToString());
        }

        private static void GenerateHandlerForListType(ref SourceProductionContext context, INamedTypeSymbol typ)
        {
            // Lists of built in types are also built in.
            ITypeSymbol elementType = typ.TypeArguments[0];
            if (elementType is INamedTypeSymbol namedElementType && IsReflectorBuiltInType(namedElementType)) return;

            StringBuilder sb = new StringBuilder(1024);

            string fullTypName = typ.ToDisplayString();

            string elementFullTypName = elementType.ToDisplayString();
            string safeNameFull = "ListOf" + GetSafeName(elementFullTypName);

            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("// Generated by Emotion.SourceGeneration");
            sb.AppendLine();
            sb.AppendLine("#nullable enable");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Runtime.CompilerServices;");
            sb.AppendLine("using Emotion.Standard.Reflector;");
            sb.AppendLine("using Emotion.Standard.Reflector.Handlers;");
            sb.AppendLine();
            sb.AppendLine($"namespace ReflectorGen;");
            sb.AppendLine("");
            sb.AppendLine($"public static class ReflectorData{safeNameFull}");

            sb.AppendLine("{");
            sb.AppendLine("");
            sb.AppendLine("    [ModuleInitializer]");
            sb.AppendLine("    public static void LoadReflector()");
            sb.AppendLine("    {");
            sb.AppendLine($"       ReflectorEngine.RegisterTypeHandler(new ListTypeHandler<{fullTypName}, {elementFullTypName}>());");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            context.AddSource($"RFLC.{safeNameFull}.g.cs", sb.ToString());
        }
    }
}
