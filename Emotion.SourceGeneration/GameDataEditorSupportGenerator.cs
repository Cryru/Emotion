using Microsoft.CodeAnalysis;
using System.Text;
using static Emotion.SourceGeneration.Helpers;

namespace Emotion.SourceGeneration
{
    /// <summary>
    /// Generates supporting code for the game data editor.
    /// </summary>
    public static class GameDataEditorSupportGenerator
    {
        public static void Run(ref SourceProductionContext context, INamedTypeSymbol typ)
        {
            if (typ.BaseType == null) return;
            if (typ.BaseType.Name != "GameDataObject") return;
            GenerateUndefinedClassForGameData(ref context, typ);
        }

        // Generates a Undefined{GameDataType}Class for each game data type. This class is used as a placeholder for new
        // objects created by the editor, until the code is hot reloaded. It inherits the game data type so it can have the
        // same properties and be edited freely.
        private static void GenerateUndefinedClassForGameData(ref SourceProductionContext context, INamedTypeSymbol typ)
        {
            string fullTypName = typ.ToDisplayString();

            string safeShortName = GetSafeName(typ.Name);
            string safeName = GetSafeName(fullTypName);

            string undefinedClassName = $"Undefined{safeShortName}Class";

            StringBuilder sb = new StringBuilder(2000);
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("// Generated by Emotion.SourceGeneration");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Runtime.CompilerServices;");
            sb.AppendLine("using Emotion.Standard.Reflector;");
            sb.AppendLine("using Emotion.Standard.Reflector.Handlers;");
            sb.AppendLine();

            sb.AppendLine($"namespace GameData;");
            sb.AppendLine("");
            sb.AppendLine($"public static partial class {safeShortName}Defs");

            sb.AppendLine("{");
            sb.AppendLine("");
            sb.AppendLine($"    [System.CodeDom.Compiler.GeneratedCode(\"Emotion.SourceGeneration - Reflector\", \"2.0\")]");
            sb.AppendLine($"    public class {undefinedClassName} : {fullTypName}");
            sb.AppendLine("    {");
            sb.AppendLine("");
            sb.AppendLine("        [ModuleInitializer]");
            sb.AppendLine("        public static void LoadReflector()");
            sb.AppendLine("        {");
            sb.AppendLine($"           ReflectorEngine.RegisterTypeHandler(new ComplexTypeHandler<{undefinedClassName}>(");
            sb.AppendLine($"               () => new {undefinedClassName}(),");
            sb.AppendLine($"               \"{undefinedClassName}\",");
            sb.AppendLine($"              []");
            sb.AppendLine("           ));");
            sb.AppendLine("        }");

            sb.AppendLine("    }");
            sb.AppendLine("}");

            context.AddSource($"RFLC.{undefinedClassName}.g.cs", sb.ToString());
        }
    }
}
